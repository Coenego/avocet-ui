/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'oae.core', './mimeTypes.js', 'bootstrap.datepicker'], function($, oae, mimeTypeConstants) {

    return function(uid) {

        // The maintenance widget container
        var $rootel = $('#' + uid);


        ///////////////////////////////////
        // REPROCESSING CONTENT PREVIEWS //
        ///////////////////////////////////

        /**
         * Handle the result of starting the preview reprocessing process by showing a success or failure notification
         *
         * @param  {Object}    err    Error object containing error code and error message
         */
        var reprocessHandler = function(err) {
            if (err) {
                oae.api.util.notification(
                    oae.api.i18n.translate('__MSG__REPROCESS_PREVIEWS_NOT_STARTED__', 'maintenance'),
                    oae.api.i18n.translate('__MSG__REPROCESS_PREVIEWS_FAILED__', 'maintenance'),
                    'error');
            } else {
                oae.api.util.notification(
                    oae.api.i18n.translate('__MSG__REPROCESS_PREVIEWS_STARTED__', 'maintenance'),
                    oae.api.i18n.translate('__MSG__REPROCESS_PREVIEWS_PROGRESS__', 'maintenance'));
            }
        };

        /**
         * Reprocess all content items with the selected mimetypes
         */
        var reprocessMimeTypes = function() {
            // Get all the selected mimetypes and construct the data object to send to the server
            var data = {'revision_mime': []};
            $(this).find('input[type="checkbox"][name]:checked').each(function(index, checkedMimeType) {
                data.revision_mime.push(checkedMimeType.name);
            });

            oae.api.admin.reprocessPreviews(data, reprocessHandler);

            return false;
        };

        /**
         * Reprocess all selected content types
         */
        var reprocessContentTypes = function() {
            // Get all the selected content types and construct the data object to send to the server
            var data = {'content_resourceSubType': []};
            $(this).find('input[type="checkbox"][name]:checked').each(function(index, checkedContentType) {
                data.content_resourceSubType.push(checkedContentType.name);
            });

            oae.api.admin.reprocessPreviews(data, reprocessHandler);

            return false;
        };

        /**
         * Reprocess all failed content previews
         */
        var reprocessFailed = function() {
            var data = {'revision_previewsStatus': ['ignored', 'error']};

            oae.api.admin.reprocessPreviews(data, reprocessHandler);
        };

        /**
         * Reprocess all content items in a date range
         */
        var reprocessDateRange = function() {
            var data = {
                'revision_createdAfter': $('#maintenance-reprocess-daterange-from', $rootel).datepicker('getDate'),
                'revision_createdBefore': $('#maintenance-reprocess-daterange-to', $rootel).datepicker('getDate')
            };

            oae.api.admin.reprocessPreviews(data, reprocessHandler);

            return false;
        };

        /**
         * Reprocess all content items for a specific user
         */
        var reprocessUser = function() {
            var data = {'revision_createdBy': []};
            $.each(oae.api.util.autoSuggest().getSelection($rootel), function(index, user) {
                data['revision_createdBy'].push(user.id);
            });

            oae.api.admin.reprocessPreviews(data, reprocessHandler);
        };

        /**
         * Select or deselect all mimetypes in a mimetype category
         */
        var selectAllMimetypes = function() {
            var selectAll = $(this).is(':checked');
            var chkContainer = $(this).parents('.checkbox').next();
            $.each($(chkContainer).find('input[type="checkbox"]'), function(i, chk) {
                $(chk).prop('checked', selectAll);
            });
        };

        ////////////////////
        // REINDEX SEARCH //
        ////////////////////

        /**
         * Reindex the search index
         */
        var reindexSearch = function() {
            oae.api.admin.reindexSearch(function(err) {
                if (err) {
                    oae.api.util.notification(
                        oae.api.i18n.translate('__MSG__REINDEX_SEARCH_NOT_STARTED__', 'maintenance'),
                        oae.api.i18n.translate('__MSG__REINDEX_SEARCH_FAILED__', 'maintenance'),
                        'error');
                } else {
                    oae.api.util.notification(
                        oae.api.i18n.translate('__MSG__REINDEX_SEARCH_STARTED__', 'maintenance'),
                        oae.api.i18n.translate('__MSG__REINDEX_SEARCH_PROGRESS__', 'maintenance'));
                }
            });
        };


        ////////////////////
        // INITIALIZATION //
        ////////////////////

        /**
         * Toggle a container
         */
        var toggleContainer = function() {
            $(this).next().toggle(400);
        };

        /**
         * Render the maintenance widget
         */
        var setUpMaintenance = function() {
            oae.api.util.template().render($('#maintenance-list-header-template', $rootel), null, $('#maintenance-list-header', $rootel));

            oae.api.util.template().render($('#maintenance-reprocess-mimetypes-template', $rootel), {
                'previewMimetypes': mimeTypeConstants.previewMimetypes
            }, $('#maintenance-reprocess-mimetypes-form', $rootel));
        };

        /**
         * Initialize the date range picker to reprocess previews within the selected time range
         */
        var setUpDateRangePicker = function() {
            // Initialize the 'from' field
            $('#maintenance-reprocess-daterange-from', $rootel).datepicker({
                todayBtn: 'linked',
                orientation: 'top left',
                autoclose: true,
                todayHighlight: true
            }).on('changeDate', function(ev) {
                // Disable all dates before or on the `from` date in the `to` date field
                var selectedDate = ev.date;
                $('#maintenance-reprocess-daterange-to', $rootel).datepicker('setStartDate', new Date(selectedDate.setDate(selectedDate.getDate() + 1)));
            });
            $('#maintenance-reprocess-daterange-to', $rootel).datepicker({
                todayBtn: 'linked',
                orientation: 'top left',
                autoclose: true,
                todayHighlight: true
            }).on('changeDate', function(ev) {
                // Disable all dates after or on the `to` date in the `from` date field
                var selectedDate = ev.date;
                $('#maintenance-reprocess-daterange-from', $rootel).datepicker('setEndDate', new Date(selectedDate.setDate(selectedDate.getDate() - 1)));
            });
        };

        /**
         * Initialize the autousuggest for user specific reprocessing of previews
         */
        var setUpUserAutosuggest = function() {
            oae.api.util.autoSuggest().setup($('#maintenance-reprocess-user-autosuggest', $rootel), {
                'url': '/api/search/general'
            }, ['user']);
        };

        /**
         * Set up form validation for the date range reprocessing form
         */
        var setUpValidation = function() {
            oae.api.util.validation().validate($('#maintenance-reprocess-daterange-form', $rootel), {
                'methods': {
                    'isolderdate': {
                        'method': function(value, element) {
                            var fromDate = $('#maintenance-reprocess-daterange-from', $rootel).datepicker('getDate');
                            var toDate = $('#maintenance-reprocess-daterange-to', $rootel).datepicker('getDate');
                            return fromDate < toDate;
                        },
                        'text': oae.api.i18n.translate('__MSG__SELECT_A_DATE_AFTER_FROM_DATE__', 'maintenance')
                    }
                },
                'submitHandler': reprocessDateRange
            });
        };

        /**
         * Add binding to various elements in the maintenance widget
         */
        var addBinding = function() {
            // Toggle a maintenance container
            $rootel.on('click', '.admin-table-striped-toggle', toggleContainer);

            // Reindex the search index
            $rootel.on('click', '#maintenance-reindexall', reindexSearch);

            // Reprocess previews
            $rootel.on('submit', '#maintenance-reprocess-mimetypes-form', reprocessMimeTypes);
            $rootel.on('submit', '#maintenance-reprocess-contenttypes-form', reprocessContentTypes);
            $rootel.on('click', '#maintenance-reprocess-all', reprocessFailed);
            $rootel.on('click', '#maintenance-reprocess-user', reprocessUser);
            $rootel.on('change', '.maintenance-reprocess-selectall', selectAllMimetypes);
        };

        addBinding();
        setUpMaintenance();
        setUpValidation();
        setUpDateRangePicker();
        setUpUserAutosuggest();

    };
});
